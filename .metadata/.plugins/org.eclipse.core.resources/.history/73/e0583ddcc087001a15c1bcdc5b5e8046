package com.capgemini.librarymanagementsystemwithjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

import com.capgemini.librarymanagementsystemwithjdbc.dto.BookBean;
import com.capgemini.librarymanagementsystemwithjdbc.dto.LibraryUserBean;
import com.capgemini.librarymanagementsystemwithjdbc.dto.RequestInfo;
import com.capgemini.librarymanagementsystemwithjdbc.exception.LMSException;

public class UserDAOImplementation implements UserDAO {

	@Override
	public LibraryUserBean login(String email, String password) {

		LibraryUserBean adminBean = new LibraryUserBean();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();

			String dburl = properties.getProperty("dburl");

			try (Connection conn = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("userLogin");
				try (PreparedStatement pstmt = conn.prepareStatement(query)) {
					pstmt.setString(1, email);
					pstmt.setString(2, password);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						adminBean.setEmailId(rs.getString("emailid"));
						adminBean.setPassword(rs.getString("password"));
						return adminBean;
					} else {
						System.out.println();
						return null;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		throw new LMSException("User can't login");

	}

	@Override
	public BookBean searchById(int id) {
		BookBean bookBean = new BookBean();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("searchBook");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setInt(1, id);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						bookBean.setBookId(rs.getInt("bookid"));
						bookBean.setBookName(rs.getString("bookName"));
						bookBean.setAuthorName(rs.getString("authorName"));
						return bookBean;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		throw new LMSException("No book found");
	}

	@Override
	public boolean bookReturn(int userId, int bookId) {

		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {

				try (PreparedStatement pstmt = connection.prepareStatement(properties.getProperty("bookReturn"))) {
					pstmt.setInt(1, userId);
					pstmt.setInt(2, bookId);

					try (ResultSet rs = pstmt.executeQuery()) {

						if (rs.next() != false) {
							int requestId = rs.getInt("requestId");
							System.out.println("Request Id....." + requestId);

							try (PreparedStatement pstmt1 = connection
									.prepareStatement(properties.getProperty("updateReturnDate"))) {
								pstmt1.setInt(1, requestId);

								int count = pstmt1.executeUpdate();
								if (count != 0) {
									return true;
								}
							}
						}
					}

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		throw new LMSException("Book cannot be returned");
	}

	@Override
	public boolean bookRequest(int id, int bookId) {
		boolean isavail = false;
		int reqestedBookId = 0;
		int validBookId = 0;
		int noOfRequests = 0;

		try (FileInputStream file = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(file);
			Class.forName(properties.getProperty("path"));

			try (Connection connection = DriverManager.getConnection(properties.getProperty("dburl"));
					Statement isReqExists = connection.createStatement();
					PreparedStatement countReqStmt = connection
							.prepareStatement(properties.getProperty("countRequests"));
					PreparedStatement statement = connection
							.prepareStatement(properties.getProperty("checkAvailability"));
					PreparedStatement statement1 = connection
							.prepareStatement(properties.getProperty("insertBookRequest"));) {

				try (ResultSet resultSet = isReqExists.executeQuery(properties.getProperty("showRequest"))) {
					while(resultSet.next()) {
						reqestedBookId = resultSet.getInt("bookid");
						if(reqestedBookId == bookId) {
							throw new LMSException("Someone Has Already Placed This Book Request");
						}
					}

				}
				countReqStmt.setInt(1, id);

				try (ResultSet countSet = countReqStmt.executeQuery()) {
					if (countSet.next()) {
						noOfRequests = countSet.getInt(1);
						System.out.println("no of req already placed" + noOfRequests);
					}

					if (noOfRequests < 3) {
						statement.setInt(1, bookId);

						try (ResultSet isAvailSet = statement.executeQuery();) {
							while (isAvailSet.next()) {
								validBookId = isAvailSet.getInt("bookid");
								System.out.println("Req Book Id" + validBookId);
								isavail = isAvailSet.getBoolean("isAvailable");
							}

							if (validBookId != 0) {
								if (isavail) {
									statement1.setInt(1, id);
									statement1.setInt(2, bookId);
									statement1.executeUpdate();

									RequestInfo requestInfo = new RequestInfo();
									requestInfo.setUserId(id);
									requestInfo.setBookId(bookId);

									return true;
								} else {
									throw new LMSException("Book Is Not Available For Borrowing");
								}
							} else {
								throw new LMSException("Invalid Book Id");
							}
						} // End Of ResultSet
					} else {
						throw new LMSException("Can't Place More Than 3 Requests");
					}
				} // End Of Count ResultSet

			} // End Of Try Resource Connection

		} catch (Exception e) {
//			e.printStackTrace();
			throw new LMSException(e.getMessage());

			}
	}

	@Override
	public boolean changePassword(String emailId, String oldPassword, String newPassword) {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("changePassword");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setString(1, newPassword);
					pstmt.setString(2, emailId);
					pstmt.setString(3, oldPassword);
					int count = pstmt.executeUpdate();
					if (count != 0) {
						return true;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		throw new LMSException("Unable to update password");

	}

}
