package com.capgemini.librarymanagementsystemwithjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Properties;

import com.capgemini.librarymanagementsystemwithjdbc.dto.BookBean;
import com.capgemini.librarymanagementsystemwithjdbc.dto.LibraryUserBean;
import com.capgemini.librarymanagementsystemwithjdbc.dto.RequestInfo;
import com.capgemini.librarymanagementsystemwithjdbc.exception.LMSException;


public class UserDAOImplementation implements UserDAO{

	@Override
	public LibraryUserBean login(String email, String password) {
		
		LibraryUserBean adminBean = new LibraryUserBean();
		try(FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")){
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			
			String dburl=properties.getProperty("dburl");
			
			try(Connection conn = DriverManager.getConnection(dburl)){
				String query =properties.getProperty("login") ;
				try(PreparedStatement pstmt = conn.prepareStatement(query)){
					pstmt.setString(1, email);
					pstmt.setString(2, password); 
					ResultSet rs = pstmt.executeQuery();
					if(rs.next()) {
					adminBean.setEmailId(rs.getString("emailid"));
					adminBean.setPassword(rs.getString("password"));
							return adminBean;
						}else {
							System.out.println();
							return null;
					}
					}	
				}
			}catch (Exception e) {
				e.printStackTrace();
			}
		
		return null;
	}

	@Override
	public BookBean searchById(int id) {
		BookBean bookBean=new BookBean();
		try(FileInputStream fis=new FileInputStream("LibraryManagementSystemDataBase.properties")){
			Properties properties=new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl=properties.getProperty("dburl");
			try(Connection connection=DriverManager.getConnection(dburl)){
				String query=properties.getProperty("searchBook");
				try(PreparedStatement pstmt=connection.prepareStatement(query)){
					pstmt.setInt(1, id);
					ResultSet rs=pstmt.executeQuery();
					if(rs.next()) {
						bookBean.setBookId(rs.getInt("bookId"));
						bookBean.setBookName(rs.getString("bookName"));
						bookBean.setAuthorName(rs.getString("authorName"));
						return bookBean;
					}
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
	
		return null;
	}

	@Override
	public RequestInfo bookRequest(LibraryUserBean userBean, BookBean bookBean) {
		RequestInfo requestInfo=new RequestInfo();
		try(FileInputStream fis=new FileInputStream("LibraryManagementSystemDataBase.properties")){
			Properties properties=new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl=properties.getProperty("dburl");
			try(Connection connection=DriverManager.getConnection(dburl)){
				String query=properties.getProperty("bookRequest");
				try(PreparedStatement pstmt=connection.prepareStatement(query)){
					pstmt.setInt(1 ,userBean.getId());
					pstmt.setInt(2 ,bookBean.getBookId());
					pstmt.setString(3, userBean.getUserName());
					pstmt.setString(4, bookBean.getBookName());
					pstmt.setString(5, requestInfo.setStatus("not approved"));
					
					int result=pstmt.executeUpdate();
					
					if(result!=0) {
						
						return requestInfo;
						
						
					}else {
						return null;
					}
					
					
				}
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	@Override
	public RequestInfo bookReturn(LibraryUserBean userBean, BookBean bookBean) {
//		RequestInfo requestInfo = new RequestInfo();
//		try (FileInputStream fileInputStream = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
//			Properties properties = new Properties();
//			properties.load(fileInputStream);
//
//			Class.forName(properties.getProperty("path")).newInstance();
//
//			try (Connection connection = DriverManager.getConnection(properties.getProperty("dburl"))) {
//
//				try (PreparedStatement preparedStatement = connection
//						.prepareStatement(properties.getProperty("updatebook1"))) {
//					preparedStatement.setString(1,requestInfo.setStatus("returning"));
//					preparedStatement.setInt(2, bookBean.getBookId());
//					requestInfo.setBookBean(bookBean);
//					requestInfo.setUserBean(userBean);
//					requestInfo.setBookIsReturned(true);
//					int count = preparedStatement.executeUpdate();
//					if (count != 0) {
//						return requestInfo;
//					} else {
//						throw new LMSException("credentials are not matching");
//					}
//				} catch (LMSException lmse) {
//					System.err.println(lmse.getMessage());
//				}
//
//			}
//		} catch (Exception e) {
//			System.err.println("invalid user or book credentials");
//
//		
//		
//	}
//
//		return null;
//}
}
