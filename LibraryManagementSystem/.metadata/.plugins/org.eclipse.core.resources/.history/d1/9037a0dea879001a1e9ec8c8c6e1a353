package com.capgemini.librarymanagementsystemhibernate.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import com.capgemini.librarymanagementsystemhibernate.dto.BookInfo;
import com.capgemini.librarymanagementsystemhibernate.dto.RequestInfo;
import com.capgemini.librarymanagementsystemhibernate.dto.UserInfo;

public class LibraryUserDAOImplementation implements LibraryUserDAO {
	
	private final static EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");


	@Override
	public UserInfo login(String emailId, String password) {
		EntityManager manager=factory.createEntityManager();
		String jpql="select e from  UserInfo e where e.emailId=:emailId and e.password=:password";
		TypedQuery<UserInfo> query=manager.createQuery(jpql,UserInfo.class);
		query.setParameter("emailId", emailId);
		query.setParameter("password", password);
		try {
			return query.getSingleResult();
		}catch(Exception e) {
			e.printStackTrace();
			
		}
		
		return null;
	}

	@Override
	public boolean addUser(UserInfo info) {
		EntityManager manager=null;
		EntityTransaction transaction=null;
		try {
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			manager.persist(info);
			System.out.println("User inserted");
			transaction.commit();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
			return false;
		}finally {
			manager.close();
			factory.close();
		}
	}
		

	@Override
	public List<UserInfo> viewUsers() {
		
		EntityManager manager = null;
		manager = factory.createEntityManager();
		String jpql = "select m from UserInfo m";
		TypedQuery<UserInfo> query = manager.createQuery(jpql, UserInfo.class);	
		List<UserInfo> recordlist = query.getResultList();
		return recordlist;
	}

	@Override
	public boolean addBook(BookInfo bookDetails) {
		
		return false;
	}

	@Override
	public BookInfo search(int bookId) {
		
		return null;
	}

	@Override
	public List<BookInfo> viewBooks() {
		
		return null;
	}

	@Override
	public List<BookInfo> viewRequests() {
		
		return null;
	}

	@Override
	public boolean issueBook(int rid) {
		
		return false;
	}

	@Override
	public boolean removeBook(BookInfo bookDetails) {
		
		return false;
	}

	@Override
	public boolean receivedBook(UserInfo info, BookInfo bookDetails) {
		
		return false;
	}

	@Override
	public UserInfo userLogin(String emailId, String password) {
		
		return null;
	}

	@Override
	public RequestInfo bookRequest(UserInfo info, BookInfo bookDetails) {
		
		return null;
	}

	@Override
	public boolean bookReturn(int userId, int bookId) {
		
		return false;
	}

}
