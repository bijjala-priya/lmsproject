package com.capgemini.librarymanagementsystemwithjdbc.controller;


import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.InputMismatchException;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;


import com.capgemini.librarymanagementsystemwithjdbc.dto.BookBean;
import com.capgemini.librarymanagementsystemwithjdbc.dto.LibraryUserBean;
import com.capgemini.librarymanagementsystemwithjdbc.dto.RequestInfo;
import com.capgemini.librarymanagementsystemwithjdbc.exception.LMSException;
import com.capgemini.librarymanagementsystemwithjdbc.factory.LibraryManagementSystemFactory;
import com.capgemini.librarymanagementsystemwithjdbc.service.AdminService;
import com.capgemini.librarymanagementsystemwithjdbc.service.UserService;
import com.capgemini.librarymanagementsystemwithjdbc.validation.LibraryManagementSystemValidation;

public class LibraryMangementSystemController {
	public static void main(String[] args) {
		LibraryMangementSystemController controller = new LibraryMangementSystemController();
		try {
			controller.lmsController();
		} catch (InputMismatchException e) {
			System.err.println("please enter valid credentials in case of  input mismatch exception");
		}catch(NumberFormatException nfe) {
			System.err.println("please enter valid credentials in case of  number format exception");
		}catch(NoSuchElementException nsee) {
			System.out.println("please enter valid credentials in case of  no such element exception");
		}finally {
			try {
				controller.lmsController();
			} catch (InputMismatchException e) {
				System.err.println("Enter valid data");
			} catch(NumberFormatException nfe) {
				System.err.println("please enter valid credentials in case of  number format exception");
			}catch(NoSuchElementException nsee) {
				System.out.println("please enter valid credentials in case of  no such element exception");
			}finally {
				controller.lmsController();
			}
		}
	}
		public void lmsController(){
		LibraryUserBean libraryUserBean=LibraryManagementSystemFactory.getLibraryUserBean();
		AdminService adminService=LibraryManagementSystemFactory.getAdminService();
		UserService userService=LibraryManagementSystemFactory.getUserService();
		BookBean bookBean=LibraryManagementSystemFactory.getBookBean();
		RequestInfo requestInfo=LibraryManagementSystemFactory.getRequestInfo();
		LibraryManagementSystemValidation lmsValidation=LibraryManagementSystemFactory.getLibraryManagementSystemValidation();
		Calendar calendar = Calendar.getInstance();
		Date actualReturnDate = LibraryManagementSystemFactory.getDate();

		Scanner scanner=new Scanner(System.in);
		int choice;
		int check;
		int userChoice;
		do {
			System.out.println("1.Amin Login");
			System.out.println("2. User Login");
			System.out.println("Enter your choice");
			choice = scanner.nextInt();
			switch(choice) {
			case 1:
				System.out.println("-----------------");
				System.out.println("Enter Admin Email id");
				String emailId = scanner.next();
				boolean validateByEmailId=lmsValidation.validateByEmail(emailId);
				if(!validateByEmailId) {
					try {
						throw new LMSException("Please enter valid Email Id");
					} catch (LMSException lmse) {
						System.err.println("Please valid Email");
						emailId = scanner.next();
						if (lmsValidation.validateByEmail(emailId)) {
							break;
						}
					}
				}
				System.out.println("Enter Admin password");
				String password = scanner.next();
				boolean validateByPassword=lmsValidation.passwordValidation(password);
				if(!validateByPassword) {
					try {
						throw new LMSException("Please enter valid password");
					}catch (LMSException lmse) {
						System.err.println("Please valid password");
						password = scanner.next();
						if (lmsValidation.passwordValidation(password)) {
							break;
						}
					}
				}
				try {
					LibraryUserBean bean=adminService.login(emailId, password);
					if(bean!=null) {
					System.out.println("Admin Login Successfull");
					
					do {
						System.out.println("1. Register");
						System.out.println("2. Search");
						System.out.println("3. Add Book");
						System.out.println("4. Show All Books");
						System.out.println("5. Show Users");
						System.out.println("6. Remove Book");
						System.out.println("7. Show Requests");
						System.out.println("8. Book Issue");
						System.out.println("9. Receive Returned Book");
						System.out.println("0. Exit");

						System.out.println("Enter your choice");
						check = scanner.nextInt();
						switch(check) {
						case 1:
							System.out.println("Enter user id");
							String userId=scanner.next();
							boolean validateByUserId=lmsValidation.ValidateByUserId(userId);
							if(!validateByUserId) {
								try {
									throw new LMSException("Please enter valid user Id");
								}catch(LMSException lmse){
									System.out.println("Please enter valid user id");
									userId=scanner.next();
									if (lmsValidation.ValidateByUserId(userId)) {
										
										break;
									}
								}
							}
							System.out.println("Enter username");
							String userName=scanner.next();
							boolean validateByName=lmsValidation.validateByName(userName);
							if(!validateByName) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									userName=scanner.next();
									if(lmsValidation.validateByName(userName)) {
										
										break;
									}
								}
							}
							System.out.println("Enter Firstname");
							String firstName=scanner.next();
							boolean validateFirstName=lmsValidation.validateByName(firstName);
							if(!validateFirstName) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									firstName=scanner.next();
									if(lmsValidation.validateByName(firstName)) {
										
										break;
									}
								}
							}
							System.out.println("Enter Lastname");
							String lastName=scanner.next();
							boolean validateLastName=lmsValidation.validateByName(lastName);
							if(!validateLastName) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									lastName=scanner.next();
									if(lmsValidation.validateByName(lastName)) {
										
										break;
									}
								}
							}
							System.out.println("Enter email id");
							String email=scanner.next();
							boolean validateByEmailId1=lmsValidation.validateByEmail(email);
							if(!validateByEmailId1) {
								try {
									throw new LMSException("Please enter valid email id");
								}catch(LMSException lmse) {
									System.out.println("Please enter only valid email id");
									email=scanner.next();
									if(lmsValidation.validateByEmail(email)) {
										
										break;
									}
								}
							}
							System.out.println("Enter password");
							String userPassword=scanner.next();
							boolean validatePassword=lmsValidation.passwordValidation(userPassword);
							if(!validatePassword) {
								try {
									throw new LMSException("Please valid password");
								}catch(LMSException lmse) {
									System.out.println("Please enter valid password");
									userPassword=scanner.next();
									if(lmsValidation.passwordValidation(userPassword)) {
										
										break;
									}
								}
							}
							System.out.println("Enter role");
							String role=scanner.next();
							boolean validateRole=lmsValidation.validateByName(role);
							if(!validateRole) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									role=scanner.next();
									if(lmsValidation.validateByName(role)) {
										
										break;
									}
								}
							}
							LibraryUserBean user1=new LibraryUserBean();
							user1.setId(Integer.parseInt(userId));
							user1.setUserName(userName);
							user1.setFirstName(firstName);
							user1.setLastName(lastName);
							user1.setEmailId(email);
							user1.setPassword(userPassword);
							user1.setRole(role);
							
							boolean res=adminService.addUser(user1);
							
							if(res) {
								System.out.println("user registered succesfully");
							}else {
								System.out.println("not registered");
							}
							break;
						case 2:
							System.out.println("Search a Book");
							System.out.println("Enter book Id");
							String searchBookId = scanner.next();
							boolean validateByBookId=lmsValidation.validateByBookId(searchBookId);
							if(!validateByBookId) {
								try {
									throw new LMSException("please enter valid book id");
								}catch(LMSException lmse) {
									System.out.println("Please enter only valid book Id");
									searchBookId=scanner.next();
									if(lmsValidation.validateByBookId(searchBookId)) {
										break;
									}
								}
							}
							
							try {
							BookBean bookInfo=adminService.searchBook(Integer.parseInt(searchBookId));
							if(bookInfo!=null) {
							System.out.println("Book is found");
							System.out.println(bookInfo.getBookId());
							System.out.println(bookInfo.getBookName());
							System.out.println(bookInfo.getAuthorName());
							
							}
							}catch(LMSException e) {
								System.out.println("book not avaliable in library");
							}
							
							break;
						case 3:
							System.out.println("Enter book id");
							String bookId=scanner.next();
							boolean validateBookId=lmsValidation.validateByBookId(bookId);
							if(!validateBookId) {
								try {
									throw new LMSException("please enter valid book id");
								}catch(LMSException lmse) {
									System.out.println("Please enter only valid book Id");
									bookId=scanner.next();
									if(lmsValidation.validateByBookId(bookId)) {
										break;
									}
								}
							}
							System.out.println("Enter Book name");
							String bookname=scanner.next();
							boolean validateByBookName=lmsValidation.validateByName(bookname);
							if(!validateByBookName) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									bookname=scanner.next();
									if(lmsValidation.validateByName(bookname)) {
										
										break;
									}
								}
							}
							System.out.println("Enter author name");
							String authorname=scanner.next();
							boolean validateByAuthorName=lmsValidation.validateByName(authorname);
							if(!validateByAuthorName) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									authorname=scanner.next();
									if(lmsValidation.validateByName(authorname)) {
										
										break;
									}
								}
							}
							System.out.println("Enter publishers name");
							String bookPublisher=scanner.next();
							boolean validateByPublisherName=lmsValidation.validateByName(bookPublisher);
							if(!validateByPublisherName) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									bookPublisher=scanner.next();
									if(lmsValidation.validateByName(bookPublisher)) {
										
										break;
									}
								}
							}
							System.out.println("Enter category");
							String category=scanner.next();
							boolean validateByCategory=lmsValidation.validateByName(category);
							if(!validateByCategory) {
								try {
									throw new LMSException("Please enter only alphabets");
								}catch(LMSException lmse) {
									System.out.println("Please enter only alphabets");
									category=scanner.next();
									if(lmsValidation.validateByName(category)) {
										
										break;
									}
								}
							}
							
							
							
							BookBean bookBean1 = new BookBean();

							bookBean1.setBookId(Integer.parseInt(bookId));
							bookBean1.setAuthorName(authorname);
							bookBean1.setBookName(bookname);
							bookBean1.setPublisher(bookPublisher);
							bookBean1.setCategory(category);
						
							boolean bookAdded = adminService.addBook(bookBean1);
							System.out.println(bookAdded);

							if (bookAdded) {
								System.out.println("book is added");
							} else {
								System.out.println("book is not added");
							}

							break;
						case 4:
							
							try {
								System.out.println("Books present in library are :");
								System.out.println("-------------------------------");

								List<BookBean> allBooks = adminService.showBooks();
								Iterator<BookBean> iterator=allBooks.iterator();
								while(iterator.hasNext()) {
									
									BookBean book=(BookBean)iterator.next();
								

									System.out.println("Book id ---------->" + book.getBookId());
									System.out.println("Book Name --------> " + book.getBookName());
									System.out.println("Book Authour------> " + book.getAuthorName());
									System.out.println("Book publisher------->"+book.getPublisher());
									System.out.println("Book Category-------->"+book.getCategory());
									System.out.println("-----------------------------------------------------");
								}
								
							} catch (LMSException e) {
								System.out.println("no books present in library");
							}
							break;
						case 5:
							try {
								System.out.println("users in library are :");
								System.out.println("-------------------------------");

								List<LibraryUserBean> allBooks = adminService.showUsers();
								Iterator<LibraryUserBean> iterator=allBooks.iterator();
								while(iterator.hasNext()) {
									
									LibraryUserBean user=(LibraryUserBean)iterator.next();
								

									System.out.println("user id ---------->" + user.getId());
									System.out.println("Username --------> " + user.getUserName());
									System.out.println("Firstname------> " + user.getFirstName());
									System.out.println("Lastname------->"+user.getLastName());
									System.out.println("Email Id-------->"+user.getEmailId());
									System.out.println("Role---------->"+user.getRole());
									System.out.println("-----------------------------------------------------");
								}
								
							} catch (LMSException e) {
								System.out.println("no books present in library");
							}
							break;
						case 6:
							System.out.println("Enter the bookId to be removed:");
							String bookId1=scanner.next();
							boolean validateBookId1=lmsValidation.validateByBookId(bookId1);
							if(!validateBookId1) {
								try {
									throw new LMSException("please enter valid book id");
								}catch(LMSException lmse) {
									System.out.println("Please enter only valid book Id");
									bookId1=scanner.next();
									if(lmsValidation.validateByBookId(bookId1)) {
										break;
									}
								}
							}
							boolean isDeleted=adminService.removeBook(Integer.parseInt(bookId1));
							if(isDeleted) {
								System.out.println("Book removed from library");
							}else {
								System.out.println("Book cannot be removed");
							}
							break;
						case 7:
							
							try {
								System.out.println("Requests for Books are :");
								System.out.println("-------------------------------");

								List<RequestInfo> requestInfos = adminService.showRequests();
								for (RequestInfo info : requestInfos) {
									
									
									

									System.out.println("Request Id------------>"+info.getRequestId());
									System.out.println("User id----------- " + info.getUserId());
									System.out.println("Book id ---------- " + info.getBookId());
									System.out.println("Book Name--------->"+info.getBookName());
									System.out.println("User name------>"+info.getUserName());
									System.out.println("status----->"+info.getStatus());

//									System.out.println("Book Issued ------" + info.isIssued());
//									System.out.println("Book Returned------" + info.isReturned());
//									System.out.println("Book IssueDate------------" + info.getIssuedDate());
									System.out.println("-------------------------------");
								}
							} catch (LMSException e) {
								System.out.println("No requests");
							}
							break;
						case 8:
							LibraryUserBean libraryUserBean1=new LibraryUserBean();
							BookBean beans=new BookBean();
								System.out.println("enter Book Id of 6 digits");
								String issueBookId = scanner.next();
								boolean validateByIssueId=lmsValidation.validateByBookId(issueBookId);
								if(!validateByIssueId) {
									try {
										throw new LMSException("please enter valid book id");
									}catch(LMSException lmse) {
										System.out.println("Please enter only valid book Id");
										issueBookId=scanner.next();
										if(lmsValidation.validateByBookId(issueBookId)) {
											break;
										}
									}
								}
								beans.setBookId(Integer.parseInt(issueBookId));
								
								System.out.println("Enter book name");
								String bookName1 = scanner.next();
								boolean validateByBookName1=lmsValidation.validateByName(bookName1);
								if(!validateByBookName1) {
									try {
										throw new LMSException("Please enter only alphabets");
									}catch(LMSException lmse) {
										System.out.println("Please enter only alphabets");
										bookName1=scanner.next();
										if(lmsValidation.validateByName(bookName1)) {
											
											break;
										}
									}
								}
								beans.setBookName(bookName1);
								
								System.out.println("enter User Id  of 3 digits");
								String issueUserId = scanner.next();
								boolean validatedByIssueId=lmsValidation.ValidateByUserId(issueUserId);
								if(!validatedByIssueId) {
									try {
										throw new LMSException("please enter valid user id");
									}catch(LMSException lmse) {
										System.out.println("Please enter only valid user Id");
										issueUserId=scanner.next();
										if(lmsValidation.ValidateByUserId(issueUserId)) {
											break;
										}
									}
								}
								libraryUserBean1.setId(Integer.parseInt(issueUserId));
								
								System.out.println("Enter user name");
								String userName1=scanner.next();
								boolean validateByUserName1=lmsValidation.validateByName(userName1);
								if(!validateByUserName1) {
									try {
										throw new LMSException("Please enter only alphabets");
									}catch(LMSException lmse) {
										System.out.println("Please enter only alphabets");
										userName1=scanner.next();
										if(lmsValidation.validateByName(userName1)) {
											
											break;
										}
									}
								}
								libraryUserBean1.setUserName(userName1);
								boolean isBookIssued = adminService.bookIssue(libraryUserBean1, beans);
								if (isBookIssued) {
									calendar.add(Calendar.DAY_OF_MONTH, 15);
									Date date = calendar.getTime();
									actualReturnDate = calendar.getTime();
									System.out.println("Book has issued successfully to user");
									System.out.println(
											"Book needs to be returned by----> " + actualReturnDate);
								} else {
									System.out.println("Book cannot be issued to user");
								}

							
							break;
						case 9:
							BookBean bookInfo=new BookBean();
								System.out.println("Receive Returned Book");
								System.out.println("-----------------------");
								System.out.println("Enter User Id of 3 digits");
								String userReturn = scanner.next();
								boolean validatedByUserReturnId=lmsValidation.ValidateByUserId(userReturn);
								if(!validatedByUserReturnId) {
									try {
										throw new LMSException("please enter valid user id");
									}catch(LMSException lmse) {
										System.out.println("Please enter only valid user Id");
										userReturn=scanner.next();
										if(lmsValidation.ValidateByUserId(userReturn)) {
											break;
										}
									}
								}
								libraryUserBean.setId(Integer.parseInt(userReturn));
								
								System.out.println("Enter 6 digits Book Id");
								String returnBook = scanner.next();
								boolean validateByReturnedId=lmsValidation.validateByBookId(returnBook);
								if(!validateByReturnedId) {
									try {
										throw new LMSException("please enter valid book id");
									}catch(LMSException lmse) {
										System.out.println("Please enter only valid book Id");
										returnBook=scanner.next();
										if(lmsValidation.validateByBookId(returnBook)) {
											break;
										}
									}
								}
								
								bookInfo.setBookId(Integer.parseInt(returnBook));
								boolean isReceived = adminService.isBookReceived(libraryUserBean, bookInfo);
								if (isReceived) {
									System.out.println("Admin received returned book by user");

								} else {
									System.out.println(
											"Invalid user or book details  Admin unable to receive");
								}
							
							break;

		
							
						}
					
						
					}while(check!=0);
					}
				}catch(Exception e) {
					System.out.println("Invalid Credentials");
				}
				break;
			case 2:
				System.out.println("-----------------");
				System.out.println("Enter User Email id");
				String userEmailId = scanner.next();
				System.out.println("Enter User password");
				String userPassword = scanner.next();

				try {
					LibraryUserBean userInfo = userService.login(userEmailId, userPassword);
					if(userInfo!=null) {
					System.out.println("User logged in");
					do {
						System.out.println("1. Search a Book");
						System.out.println("2. Request a Book");
						System.out.println("3. Return Book");
						System.out.println("0. Exit");
						System.out.println("Enter your choice");
						userChoice = scanner.nextInt();
						switch (userChoice) {
						case 1:
							System.out.println("Search a Book");
							System.out.println("Enter book Id");
							String searchBookId = scanner.next();
							boolean validateBySearchBookId=lmsValidation.validateByBookId(searchBookId);
							if(!validateBySearchBookId) {
								try {
									throw new LMSException("please enter valid book id");
								}catch(LMSException lmse) {
									System.out.println("Please enter only valid book Id");
									searchBookId=scanner.next();
									if(lmsValidation.validateByBookId(searchBookId)) {
										break;
									}
								}
							}
							try {
							BookBean bookInfo=userService.searchById(Integer.parseInt(searchBookId));
							if(bookInfo!=null) {
							System.out.println("Book is found");
							System.out.println("Book Id---------->"+bookInfo.getBookId());
							System.out.println("Book name is---------->"+bookInfo.getBookName());
							System.out.println("Author name is---------->"+bookInfo.getAuthorName());
//							System.out.println("Book is found");
							}else {
								System.out.println("Book is not avaliable in library");
							}
							}catch(LMSException e) {
								System.out.println("No such book is found in library");
							}
							
							break;
						case 2:
							LibraryUserBean userBean=new LibraryUserBean();
							BookBean booksBean=new  BookBean();
							System.out.println("Enter user Id of 3 digits");
							String userId=scanner.next();
							boolean validatedByUserId=lmsValidation.ValidateByUserId(userId);
							if(!validatedByUserId) {
								try {
									throw new LMSException("please enter valid book id");
								}catch(LMSException lmse) {
									System.out.println("Please enter only valid book Id");
									userId=scanner.next();
									if(lmsValidation.ValidateByUserId(userId)) {
										break;
									}
								}
							}
							userBean.setId(Integer.parseInt(userId));
							System.out.println("Enter book Id of 6 digits");
							String bookId=scanner.next();
							boolean validatedByBookId=lmsValidation.validateByBookId(bookId);
							if(!validatedByBookId) {
								try {
									throw new LMSException("please enter valid book id");
								}catch(LMSException lmse) {
									System.out.println("Please enter only valid book Id");
									bookId=scanner.next();
									if(lmsValidation.validateByBookId(bookId)) {
										break;
									}
								}
							}
							booksBean.setBookId(Integer.parseInt(bookId));
							System.out.println("Enter BookName");
							String bookName2=scanner.next();
							booksBean.setBookName(bookName2);
							System.out.println("Enter user name");
							String userName2=scanner.next();
							userBean.setUserName(userName2);
							
							try {
								
								RequestInfo request=userService.bookRequest(userBean, booksBean);
//								 request = userService.bookRequest(userBean, bookBean);
								System.out.println("Request placed to admin");
								System.out.println("User Id-----" + request.getUserBean().getId());
								System.out.println("Book Id-----" + request.getBookBean().getBookId());
								System.out.println("Book Name----->"+request.getBookBean().getBookName());
								
								

							} catch (LMSException e) {

								System.out.println("Enter valid data or Invalid Request");
							}
							break;	
						case 3:
//							LibraryUserBean bean=new LibraryUserBean();
//							BookBean bookInfo=new BookBean();
//							System.out.println("Returning a book:");
//							System.out.println("Enter User Id of 3 didgits");
//							String returnUserId=scanner.next();
//							boolean validatedByUid=lmsValidation.ValidateByUserId(returnUserId);
//							if(!validatedByUid) {
//								try {
//									throw new LMSException("please enter valid book id");
//								}catch(LMSException lmse) {
//									System.out.println("Please enter only valid book Id");
//									returnUserId=scanner.next();
//									if(lmsValidation.ValidateByUserId(returnUserId)) {
//										break;
//									}
//								}
//							}
//							bean.setId(Integer.parseInt(returnUserId));
//							System.out.println("Enter Book Id of 6 digits");
//							String returnBook = scanner.next();
//							boolean validatedByReturnBid=lmsValidation.validateByBookId(returnBook);
//							if(!validatedByReturnBid) {
//								try {
//									throw new LMSException("please enter valid book id");
//								}catch(LMSException lmse) {
//									System.out.println("Please enter only valid book Id");
//									returnBook=scanner.next();
//									if(lmsValidation.validateByBookId(returnBook)) {
//										break;
//									}
//								}
//							}
//							
//							bookInfo.setBookId(Integer.parseInt(returnBook));
//
//							try {
//								RequestInfo requestInfo1 = userService.bookReturn(bean, bookInfo);
//								System.out.println("Book is Returning to Admin by user");
////								System.out.println("User Id ------>" + requestInfo1.getUserBean().getId());
////								System.out.println("Book Id ------>" + requestInfo1.getBookBean().getBookId());
////								System.out
////										.println("Is Returning ----->" + requestInfo1.isBookIsReturned());
//
//							} catch (LMSException lmse) {
//								System.out.println(lmse.getMessage());
//							}
							break;
						

							
						
						}
			
					
			}while(userChoice!=0);
					}
				}catch(Exception e) {
					
				}
			}
		}while(true);
	

}
}
